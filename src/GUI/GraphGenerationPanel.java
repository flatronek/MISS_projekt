/*
 * authors: Dominik Juraszek, Konrad Chmiel, Sebastian Brandys
 */
package GUI;


import java.awt.Color;
import java.awt.GridBagLayout;

import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.SpinnerNumberModel;

import Controller.Controller;
import edu.uci.ics.jung.algorithms.layout.StaticLayout;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.EditingModalGraphMouse;
import exceptions.NoPossibilityToCreateGraphException;
import exceptions.ProblemWithReadingGraphFromFileException;
import graph.Graf;
import graph.LayoutType;
import graph.LineChart_AWT;

public class GraphGenerationPanel extends javax.swing.JPanel {

    private Graf grafKreator = null; // contains created graph
    private final GraphPanel graphPanel; // graph panel, to show graph
    private final Controller controller; // application controller
    private final JTabbedPane tabChoosePanel;

    /**
     * Creates new form GraphGeneration.
     * 
     * @param graphPanel
     * @param controller 
     * @param tabChoosePanel
     */
    public GraphGenerationPanel(GraphPanel graphPanel, Controller controller, JTabbedPane tabChoosePanel) {
        initComponents();
        this.graphPanel = graphPanel;
        this.controller = controller;
        this.tabChoosePanel = tabChoosePanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generationParameters = new javax.swing.JPanel();
        generationParameters.setLayout(new BoxLayout(generationParameters, BoxLayout.PAGE_AXIS));
        verticesCount = new javax.swing.JSpinner(new SpinnerNumberModel(400, 2, 1500, 1));
        verticesCountLabel = new javax.swing.JLabel();
        setVerticesCountToShow(new javax.swing.JSpinner(new SpinnerNumberModel(3, 2, (int)verticesCount.getValue(), 1)));
        verticesCountToShowLabel = new javax.swing.JLabel();
        edgesCount = new javax.swing.JSpinner(new SpinnerNumberModel(10, 1, 2000, 1));
        edgesCountLabel = new javax.swing.JLabel();
        
        generateButton = new javax.swing.JButton();
       
        drawingControlPanel = new javax.swing.JPanel();
        drawButton = new javax.swing.JButton();
        finishDrawingButton = new javax.swing.JButton();
        settingLayoutPanel = new javax.swing.JPanel();
        layoutLabel = new javax.swing.JLabel();
        layoutChooserCheckBox = new javax.swing.JComboBox();

        generationParameters.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Ustawienia parametrów"))));

        verticesCount.setToolTipText("Ustaw wartoœci");

        verticesCountLabel.setText("Wierzcho³ki");
        verticesCountToShowLabel.setText("Wierzcho³ki do pokazania");

        edgesCount.setToolTipText("Ustaw wartoœci");

        edgesCountLabel.setText("Krawêdzie");

        

       

        generateButton.setText("Generuj");
        generateButton = createCustomButton("Generuj");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });


        
        JPanel vert = new JPanel();
        vert.add(verticesCountLabel);
        vert.add(verticesCount);
        vert.add(verticesCountToShowLabel);
        vert.add(getVerticesCountToShow());

        generationParameters.add(vert);
        
        JPanel edg = new JPanel();
        edg.add(edgesCountLabel);
        edg.add(edgesCount);
        setChart1(new LineChart_AWT(
      	      "Degrees of the Vertices" ,
      	      ""));
      getChart1().setVisible( true );
   
        generationParameters.add(edg);
        setChart(new LineChart_AWT(
        	      "Degrees of the Vertices" ,
        	      ""));
        getChart().setVisible( true );
        generationParameters.add(getChart());
        
        
        JPanel gbtn = new JPanel();
   
    
        gbtn.add(generateButton);
       
        generationParameters.add(gbtn);
        

        
       


 

     //   drawingControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Rysowanie grafu"));

        drawButton.setText("Rysuj");
        drawButton = createCustomButton("Rysuj");
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });

        finishDrawingButton.setText("Zakoñcz rysowanie");
        finishDrawingButton.setEnabled(false);
        finishDrawingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishDrawingButtonActionPerformed(evt);
            }
        });




        settingLayoutPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Ustawienia wygl¹du"));

        layoutLabel.setText("Wybierz wygl¹d");

        layoutChooserCheckBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Circle", "Kamada Kawai", "Fruchterman Rheingold", "Meyer" }));
        layoutChooserCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                layoutChooserCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout settingLayoutPanelLayout = new javax.swing.GroupLayout(settingLayoutPanel);
        settingLayoutPanel.setLayout(settingLayoutPanelLayout);
        settingLayoutPanelLayout.setHorizontalGroup(
            settingLayoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingLayoutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(layoutLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(layoutChooserCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        settingLayoutPanelLayout.setVerticalGroup(
            settingLayoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingLayoutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingLayoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(layoutLabel)
                    .addComponent(layoutChooserCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        
        JPanel gdrw = new JPanel();
        gdrw.add(drawButton);
        gdrw.add(finishDrawingButton);
        drawingControlPanel.setLayout(new BoxLayout(drawingControlPanel, BoxLayout.PAGE_AXIS));
        drawingControlPanel.add(getChart1());
        drawingControlPanel.add(gdrw);
      

        JPanel empty1 = new JPanel();
        JPanel empty2 = new JPanel();
        
        this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));
        this.add(empty1);
        this.add(generationParameters);
       
        this.add(settingLayoutPanel);
        this.add(drawingControlPanel);
        this.add(empty2);
        
        
    }// </editor-fold>//GEN-END:initComponents

    

    /**
     * Action for generate button.
     *
     * @param evt - event
     */
    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed

            try {
                grafKreator = new Graf((int) verticesCount.getValue()-1, (int) edgesCount.getValue(), (int) getVerticesCountToShow().getValue(),chart,chart1);
                acceptNewGraph();
                verticesCountToShow.setModel(new SpinnerNumberModel(3, 2, (int)verticesCount.getValue(), 1));
            } catch (NoPossibilityToCreateGraphException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Ostrze¿enie", JOptionPane.ERROR_MESSAGE);
            }
     
    }//GEN-LAST:event_generateButtonActionPerformed

    /**
     * Invoke after setting new graph (by loading or generating), displays graph
     * and sets it in controller.
     */
    public void acceptNewGraph() {
        graphPanel.displayNewGraph(grafKreator.getGraphPart());
        controller.setGraf(grafKreator);

      
    }




    /**
     * Action for draw button
     *
     * @param evt - event
     */
    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed
        setEnabledWhileDrawing(false);
        drawing();
    }//GEN-LAST:event_drawButtonActionPerformed

    /**
     * Enables/disables components.
     *
     * @param flag - flag to set (enabled/disabled)
     */
    private void setEnabledWhileDrawing(boolean flag) {
        tabChoosePanel.setEnabledAt((tabChoosePanel.getSelectedIndex() + 1) % 3, flag);
        tabChoosePanel.setEnabledAt((tabChoosePanel.getSelectedIndex() + 2) % 3, flag);
        drawButton.setEnabled(flag);
      
       
        generateButton.setEnabled(flag);
   
        layoutChooserCheckBox.setEnabled(flag);
        finishDrawingButton.setEnabled(!flag);
    }

    /**
     * Action for finish draawing button
     *
     * @param evt - event
     */
    private void finishDrawingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishDrawingButtonActionPerformed
        boolean removedSomeEdges = grafKreator.removeSingleVertexLoopback();
        graphPanel.repaint();
        if (grafKreator.getVertexCount() >= 2 && grafKreator.getEdgeCount() >= 1) {
            controller.setGraf(grafKreator);
            grafKreator.repairGraphAfterEditing();
            setEnabledWhileDrawing(true);
            graphPanel.getVv().setGraphMouse(new DefaultModalGraphMouse<String, Number>());
            graphPanel.setGraph(grafKreator.getGraph());
            if (removedSomeEdges) {
                JOptionPane.showMessageDialog(this, "Krawêdzie zaczynaj¹ce i koñcz¹ce siê w tym samym wierzcho³ku zosta³y usuniête",
                        "Removed some edges", JOptionPane.INFORMATION_MESSAGE);
            }
        } else if (removedSomeEdges) {
            JOptionPane.showMessageDialog(this, "Graf powinien mieæ minimum 2 wierzcho³ki i 1 krawêdŸ"
                    + "\nKrawêdzie zaczynaj¹ce i koñcz¹ce siê w tym samym wierzcho³ku zosta³y usuniête",
                    "Zakoñczenie rysowania nie powiod³o siê", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Graf powinien mieæ minimum 2 wierzcho³ki i 1 krawêdŸ!",
                    "Zakoñczenie rysowania nie powiod³o siê", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_finishDrawingButtonActionPerformed

    public static javax.swing.JButton createCustomButton(String text) {
    	javax.swing.JButton button = new javax.swing.JButton(text);
    	  button.setForeground(Color.WHITE);
    	  button.setBackground(Color.DARK_GRAY);
    	 // button.setBorder(null);
    	  button.setOpaque(true);
    	  button.setText(text);
    	  return button;
    	}
    
    private void layoutChooserCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_layoutChooserCheckBoxItemStateChanged
        switch (layoutChooserCheckBox.getSelectedIndex()) {
            case 0:
                graphPanel.setLayoutType(LayoutType.CIRCLE);
                break;
            case 1:
                graphPanel.setLayoutType(LayoutType.KAMADAKAWAI);
                break;
            case 2:
                graphPanel.setLayoutType(LayoutType.FRUCHTERMANRHEINGOLD);
                break;
            case 3:
                graphPanel.setLayoutType(LayoutType.MEYER);
                break;
        }
    }//GEN-LAST:event_layoutChooserCheckBoxItemStateChanged

    /**
     * Drawing graph function.
     */
    private void drawing() {
        grafKreator = new Graf();
        StaticLayout<Integer, String> layout = new StaticLayout<>(grafKreator.getGraph());
        layout.setSize(graphPanel.getSize());
        VisualizationViewer<Integer, String> vv
                = new VisualizationViewer<>(layout, graphPanel.getSize());
        EditingModalGraphMouse gm = new EditingModalGraphMouse(vv.getRenderContext(),
                grafKreator.getVertexFactory(), grafKreator.getEdgeFactory());
        gm.remove(gm.getPopupEditingPlugin());
        gm.add(new RemovingEdgesAndVerticesMenus(vv));
        vv.setGraphMouse(gm);
        vv.setBackground(Color.white);
     
        graphPanel.setVv(vv);
        graphPanel.removeAll();
        graphPanel.add(vv);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables

    public javax.swing.JSpinner getVerticesCountToShow() {
		return verticesCountToShow;
	}

	public void setVerticesCountToShow(javax.swing.JSpinner verticesCountToShow) {
		this.verticesCountToShow = verticesCountToShow;
	}

	public LineChart_AWT getChart() {
		return chart;
	}

	public void setChart(LineChart_AWT chart) {
		this.chart = chart;
	}

	public LineChart_AWT getChart1() {
		return chart1;
	}

	public void setChart1(LineChart_AWT chart1) {
		this.chart1 = chart1;
	}

	private javax.swing.JButton drawButton;
    private javax.swing.JPanel drawingControlPanel;
    private javax.swing.JSpinner edgesCount;
    private javax.swing.JLabel edgesCountLabel;
    private javax.swing.JButton finishDrawingButton;
    private javax.swing.JButton generateButton;
    private javax.swing.JPanel generationParameters;

    private javax.swing.JComboBox layoutChooserCheckBox;
    private javax.swing.JLabel layoutLabel;
private LineChart_AWT chart;
private LineChart_AWT chart1;

    private javax.swing.JPanel settingLayoutPanel;
    private javax.swing.JSpinner verticesCount;
    private javax.swing.JSpinner verticesCountToShow;
    private javax.swing.JLabel verticesCountLabel;
    private javax.swing.JLabel verticesCountToShowLabel;
    // End of variables declaration//GEN-END:variables
}
